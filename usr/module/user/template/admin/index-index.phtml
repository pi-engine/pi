<?php
$this->css($this->assetModule('script/admin.css'));
$this->angular(array(
    'angular-route.js',
    'angular-translate.js',
    'pi-pagination.js'
));
?>
<div ng-controller="MainCtrl" ng-app="userListModule">
    <ul class="nav nav-tabs">
        <li ng-class="navClass('/all')">
            <a href="#!all">
                <?php _e('All');?>
            </a>
        </li>
        <li ng-class="navClass('/activated')">
            <a href="#!activated">
                <?php _e('Activated');?>
            </a>
        </li>
        <li ng-class="navClass('/pending')">
            <a href="#!pending">
                <?php _e('Pending'); ?>
            </a>
        </li>
        <li ng-class="navClass('/new')">
            <a href="#!new">
                <?php _e('Add new'); ?>
            </a>
        </li>
        <li class="<?php echo $action == 'search' ? 'active' : ''; ?>">
            <a href="<?php echo $this->url('', array('controller' => 'index', 'action' => 'search')); ?>">
                <?php _e('Advanced search'); ?>
            </a>
        </li>
    </ul>
    <div ng-view></div>
</div>
<dl class="page-header">Links</dl>
<ul>
    <li>
        <a href="<?php echo $this->url('', array('controller' => 'build', 'action' => 'index'));?>">
            <?php _e('Build user module data');?>
        </a>
    </li>
</ul>

<script>
var userListModule = angular.module('userListModule', ['ngRoute', 'pagination', 'pascalprecht.translate']);
var userListModuleConfig = {
    urlRoot: '<?php echo $this->url('', array('controller' => 'index', 'action' => 'var')); ?>'.replace(/var\/?$/, ''),
    assetRoot: '<?php echo $this->assetModule('ng-template/admin/', '', true, false); ?>',
    t: {
        confirm: '<?php _e('Are you sure delete this user'); ?>',
        confirms: '<?php _e('Are you sure delete this users'); ?>',
        ACTIVE_STATE:'<?php _e('Active State'); ?>',
        TITLE: '<?php _e('Add user'); ?>',
        USER_NAME: '<?php _e('Username'); ?>',
        DISPLAY_NAME: '<?php _e('Display name'); ?>',
        EMAIL: '<?php _e('Email'); ?>',
        PASSWORD: '<?php _e('Password'); ?>',
        CONFIRM_PASSWORD: '<?php _e('Confirm password'); ?>',
        ACTIVATE: '<?php _e('Activate'); ?>',
        ENABLE: '<?php _e('Enable'); ?>',
        SUBMIT: '<?php _e('Submit'); ?>',
        REQUIRED: '<?php _e('required'); ?>',
        INVALID_EMAIL: '<?php _e('invalid email'); ?>',
        PASSWORD_MATCH: '<?php _e("Passwords don\'t match"); ?>',
        USER_NAME_TOKEN: '<?php _e('Username is already token'); ?>',
        EMAIL_TOKEN: '<?php _e('Email is already token'); ?>',
        DISPLAY_NAME_TOKEN: '<?php _e('Dispaly name is already token'); ?>'
    }
};
</script>
<script>
userListModule.config(function($translateProvider) {
    $translateProvider.translations(userListModuleConfig.t);
}).config(function($routeProvider, $locationProvider) {
    $locationProvider.hashPrefix('!');
    $routeProvider.when('/activated', {
        templateUrl: userListModuleConfig.assetRoot + 'index-activated.html',
        controller: 'ListCtrl'
    }).when('/pending', {
        templateUrl: userListModuleConfig.assetRoot + 'index-pending.html',
        controller: 'ListCtrl'
    }).when('/new', {
        templateUrl: userListModuleConfig.assetRoot + 'index-new.html',
        controller: 'NewCtrl'
    }).otherwise({
        redirectTo: '/all',
        templateUrl: userListModuleConfig.assetRoot + 'index-all.html',
        controller: 'ListCtrl'
    });
}).directive('match', function($parse) {
    var link = function(scope, element, attr, ctrl) {
        var match = element.inheritedData('$formController')[attr.match];
        ctrl.$parsers.push(function(value) {
            if (value) {
                ctrl.$setValidity("mismatch", value === match.$viewValue);
                return value;
            } else {
                ctrl.$setValidity("mismatch", true);
                return undefined;
            }
        });
        match.$parsers.push(function(value) {
            var val = ctrl.$viewValue;
            if (val) {
                ctrl.$setValidity("mismatch", value === val);
            }
            return value;
        });
    }
    return {
        require: 'ngModel',
        link: link,
        restrict: 'A'
    };
}).directive('unique', function(server) {
    var link = function(scope, element, attr, ctrl) {
        element.on('blur', function() {
            if (!ctrl.$viewValue) return;
            server
                .unique(attr.name, ctrl.$viewValue)
                .success(function(data) {
                    ctrl.$setValidity('unique', data.status);
                    console.log(ctrl);
                });
        });
    }
    return {
        require: 'ngModel',
        link: link,
        restrict: 'A'
    }
});
userListModule.service('server', function($http) {
    var urlRoot = userListModuleConfig.urlRoot;
    var isFile = function(obj) {
        return Object.prototype.toString.apply(obj) === '[object File]';
    };
    //emulate jQuery post
    $http.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8';
    $http.defaults.transformRequest = [function(d) {
        return angular.isObject(d) && !isFile(d) ? $.param(d) : d;
    }];
    this.get = function (action, params) {
        return $http.get(urlRoot + action, {
            params: params || ''
        });
    };
    this.getRoles = function() {
        return $http.get(urlRoot + 'getRoles', { cache: true });
    };
    this.parse = function(data) {
        var users = data.users;
        for (var i = 0, l = users.length; i < l; i++) {
            users[i].time_disabled *= 1000;
            users[i].time_created *= 1000;
            users[i].time_activated *= 1000;
            users[i].checked = 0;
            users[i].active = parseInt(users[i].active, 10);
        }
    };
    this.disable = function(ids) {
        if (angular.isArray(ids)) {
            ids = ids.join(',');
        }
        return $http.post(urlRoot + 'disable', {
            ids: ids
        });
    };
    this.enable = function(ids) {
        if (angular.isArray(ids)) {
            ids = ids.join(',');
        }
        return $http.post(urlRoot + 'enable', {
            ids: ids
        });
    };
    this.active = function(ids) {
        if (angular.isArray(ids)) {
            ids = ids.join(',');
        }
        return $http.post(urlRoot + 'activateUser', {
            ids: ids
        });
    };
    this.remove = function(ids) {
        if (angular.isArray(ids)) {
            ids = ids.join(',');
        }
        return $http.post(urlRoot + 'deleteUser', {
            ids: ids
        });
    };
    this.add = function(params) {
        return $http.post(urlRoot + 'addUser', params);
    };
    this.unique = function(key, value) {
        var params = {};
        params[key] = value;
        return $http.get(urlRoot + 'checkDuplication', {
            params: params,
            cache: true
        });
    }

}).controller('MainCtrl', function($scope, $location) {
    $scope.navClass = function(path) {
         if ($location.path().substr(0, path.length) == path) {
          return "active";
        } else {
          return "";
        }
    };
}).controller('ListCtrl', function($scope, $location, server) {
    var action = $location.path().replace(/^\//, '');
    var getSearchParams = function() {
        var param = {
            active: $scope.active,
            enable: $scope.enable,
            front_role: $scope.front_role,
            admin_role: $scope.admin_role,
            search: $scope.search,
            register_date: $scope.register_date
        };
        return param;
    };
    $scope.paginator = { page: 1 };
    $scope.$watch('paginator.page', function(num) {
        var param = getSearchParams();
        param.p = num;
        server.get(action, param).success(function(data) {
            server.parse(data);
            $scope.users = data.users;
            $scope.paginator = data.paginator;
        });
    });
    server.getRoles().success(function(data) {
        angular.extend($scope, data);
    });

    $scope.markAll = function(checked) {
        angular.forEach(this.users, function(user) {
            user.checked = checked;
        });
    };
    $scope.clearAlert = function() {
        $scope.alert = '';
    };
    $scope.disableAction = function(user) {
        server.disable(user.id).success(function(data) {
            $scope.alert = data;
            if (data.status) {
                user.time_disabled = 1;
                user.active = 0;
            }
        });
    };
    $scope.disableBatchAction = function() {
        var ids = [];
        var users = $scope.users;
        angular.forEach(users, function(user) {
            if (user.checked) {
                if (user.time_disabled) {
                    user.checked = 0;
                } else {
                    ids.push(user.id);
                }
            }
        });
        $scope.allChecked = 0;
        server.disable(ids).success(function(data) {
            $scope.alert = data;
            if (data.status) {
                angular.forEach(users, function(user) {
                    if (user.checked) {
                        user.time_disabled = 1;
                        user.active = 0;
                        user.checked = 0;
                    }
                });
            }
        });
    };
    $scope.enableAction = function(user) {
        server.enable(user.id).success(function(data) {
            $scope.alert = data;
            if (data.status) {
                user.time_disabled = 0;
                if (user.time_activated) user.active = 1;
            }
        });
    };
    $scope.enableBatchAction = function() {
        var ids = [];
        var users = $scope.users;
        angular.forEach(users, function(user) {
            if (user.checked) {
                if (user.time_disabled) {
                    ids.push(user.id);
                } else {
                    user.checked = 0;
                }
            }
        });
        $scope.allChecked = 0;
        server.enable(ids).success(function(data) {
            $scope.alert = data;
            if (data.status) {
                angular.forEach(users, function(user) {
                    if (user.checked) {
                        user.time_disabled = 0;
                        if (user.time_activated) user.active = 1;
                        user.checked = 0;
                    }
                });
            }
        });
    };
    $scope.activeAction = function(user) {
        server.active(user.id).success(function(data) {
            $scope.alert = data;
            if (data.status) {
                user.time_activated = 1;
            }
        });
    };
    $scope.activeBatchAction = function() {
        var ids = [];
        var users = $scope.users;
        angular.forEach(users, function(user) {
            if (user.checked) {
                if (!user.time_activated) {
                    ids.push(user.id);
                } else {
                    user.checked = 0;
                }
            }
        });
        $scope.allChecked = 0;
        server.active(ids).success(function(data) {
            $scope.alert = data;
            if (data.status) {
                angular.forEach(users, function(user) {
                    if (user.checked) {
                        user.time_activated = 1;
                        user.checked = 0;
                    }
                });
            }
        });
    };
    $scope.deleteAction = function(idx) {
        if (!confirm(translate.confirm)) return;
        var users = this.users
        var user = users[idx];
        server.remove(user.id).success(function(data) {
            $scope.alert = data;
            if (data.status) {
                users.splice(idx, 1);
            }
        });
    };
    $scope.deleteBatchAction = function() {
        if (!confirm(translate.confirms)) return;
        var ids = [];
        angular.forEach($scope.users, function(user) {
            user.checked && ids.push(user.id);
        });
        $scope.allChecked = 0;
        server.remove(ids).success(function(data) {
            $scope.alert = data;
            var ret = [];
            angular.forEach($scope.users, function(user) {
                !user.checked && ret.push(user);
            });
            $scope.users = ret;
        });
    };
    $scope.searchAction = function() {
        server.get('all', getSearchParams()).success(function(data) {
            $scope.users = data.users;
            $scope.paginator = data.paginator;
        });
    };
}).controller('NewCtrl', function($scope, server) {
    $scope.activate = 0;
    $scope.enable = 0;
    $scope.activateAction = function() {
        if ($scope.activate) {
            $scope.activate  = 0;
        } else {
            $scope.activate = 1;
        }
    };
    $scope.enableAction = function() {
        if ($scope.enable) {
            $scope.enable  = 0;
        } else {
            $scope.enable = 1;
        }
    };
    $scope.submit = function() {
        server.add({
            identity: $scope.identity,
            name: $scope.name,
            email: $scope.email,
            credential: $scope.credential,
            'credential-confirm': $scope.credential_confirm,
            activate: $scope.activate,
            enable: $scope.enable
        }).success(function(data) {
            $scope.alert = data;
        });
    };
});
</script>
